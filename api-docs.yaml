openapi: 3.0.0
info:
  title: Login, Register, Authenticate, and API Documentation
  description: API for user authentication, user management, and banking transactions
  version: 1.0.0
servers:
  - url: http://localhost:3000/api/v1

paths:
  /auth/register:
    post:
      tags:
        - "register"
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Regis Rifaldi
                email:
                  type: string
                  example: regisrifaldi44@gmail.com
                password:
                  type: string
                  example: Regisrifaldi44
                identityType:
                  type: string
                  example: SIM
                identityNumber:
                  type: string
                  example: "214235321"
                address:
                  type: string
                  example: Jl. kampung rambutan no.122, Jakarta
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: Regis Rifaldi
                  email:
                    type: string
                    example: regisrifaldi44@gmail.com
                  password:
                    type: string
                    example: Regisrifaldi44
                  identityType:
                    type: string
                    example: SIM
                  identityNumber:
                    type: string
                    example: "214235321"
                  address:
                    type: string
                    example: Jl. kampung rambutan no.122, Jakarta
        400:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: email has already been used!
                  data:
                    type: string
                    example: null
  /auth/login:
    post:
      tags:
        - "login"
      summary: Log in with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: regisrifaldi44@gmail.com
                password:
                  type: string
                  example: Regisrifaldi44

      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      id:
                        type: number
                        example: 4
                      name:
                        type: string
                        example: Regisrifaldi44
                      email:
                        type: string
                        example: regisrifaldi44@gmail.com
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwibmFtZSI6IlJlZ2lzIFJpZmFsZGkiLCJlbWFpbCI6InJlZ2lzcmlmYWxkaTQ0QGdtYWlsLmNvbSIsImlhdCI6MTcxMzYzMTQ0OX0.jJ6grgfsFNVBBQadiPZPTXvnW9c0H7uUhcUMfdQnk6E

        400:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: invalid email or password!
                  data:
                    type: string
                    example: null

  /auth/authenticate:
    get:
      tags:
        - "authenticate"
      summary: Authenticate user using token
      security:
        - BearerAuth: []
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: true
                  message:
                    type: boolean
                    example: OK
                  data:
                    type: object
                    properties:
                      id:
                        type: number
                        example: 4
                      name:
                        type: string
                        example: Regisrifaldi44
                      email:
                        type: string
                        example: regisrifaldi44@gmail.com

        400:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: token not provided!!
                  data:
                    type: string
                    example: null
  /users:
    post:
      tags:
        - "users"
      summary: Add a new user along with their profile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Rifaldi
                email:
                  type: string
                  example: rifaldi88@gmail.com
                password:
                  type: string
                  example: Rifaldi88
                identityType:
                  type: string
                  example: KTP
                identityNumber:
                  type: string
                  example: "12534235"
                address:
                  type: string
                  example: Jl. Mawar no.10 Palembang
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: Regis Rifaldi
                  email:
                    type: string
                    example: regisrifaldi44@gmail.com
                  password:
                    type: string
                    example: Regisrifaldi44
                  identityType:
                    type: string
                    example: SIM
                  identityNumber:
                    type: string
                    example: "214235321"
                  address:
                    type: string
                    example: Jl. kampung rambutan no.122, Jakarta
        400:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "email: rifaldi88@gmail.com, telah digunakan sebelumnya!"

    get:
      tags:
        - "users"
      summary: Get a list of users
      security:
        - BearerAuth: []
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Berhasil menampilkan semua data users
                  data:
                    oneOf:
                      - type: array
                      - type: object
                        properties:
                          id:
                            type: number
                            example: 4
                          name:
                            type: string
                            example: x
                          email:
                            type: string
                            example: x@gmail.com
                          token:
                            type: string
                            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwibmFtZSI6IlJlZ2lzIFJpZmFsZGkiLCJlbWFpbCI6InJlZ2lzcmlmYWxkaTQ0QGdtYWlsLmNvbSIsImlhdCI6MTcxMzYzMTQ0OX0.jJ6grgfsFNVBBQadiPZPTXvnW9c0H7uUhcUMfdQnk6E

  /users-profile:
    get:
      tags:
        - "users"
      summary: Get a list of users along with their profiles
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved a list of users with profiles
  /users/{id}:
    get:
      tags:
        - "users"
      summary: Get user details by ID along with their profile
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the user to retrieve
      responses:
        "200":
          description: Successfully retrieved user details by ID with profile
        "404":
          description: User not found
  /account:
    post:
      tags:
        - "account"
      summary: Add a new account to an existing user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                bank_name:
                  type: string
                bank_account_number:
                  type: string
                balance:
                  type: number
      responses:
        "200":
          description: Successfully added a new account
        "400":
          description: Bad request, missing or invalid parameters
    get:
      tags:
        - "account"
      summary: Get a list of accounts
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved a list of accounts
  /account-profile:
    get:
      tags:
        - "account"
      summary: Get a list of accounts along with user details
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved a list of accounts with user details
  /account/{id}:
    get:
      tags:
        - "account"
      summary: Get account details by ID along with user details
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the account to retrieve
      responses:
        "200":
          description: Successfully retrieved account details by ID with user details
        "404":
          description: Account not found
  /transaction:
    post:
      tags:
        - "transaction"
      summary: Transfer money from one account to another
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                source_account_id:
                  type: integer
                  example: 1
                destination_account_id:
                  type: integer
                  example: 2
                amount:
                  type: number
                  example: 10203049
      responses:
        "200":
          description: Successfully transferred money
        "400":
          description: Bad request, missing or invalid parameters
    get:
      tags:
        - "transaction"
      summary: Get a list of transactions
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved a list of transactions
  /transaction-profile:
    get:
      tags:
        - "transaction"
      summary: Get a list of transactions along with account and user details
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved a list of transactions with account and user details
  /transaction/{id}:
    get:
      tags:
        - "transaction"
      summary: Get transaction details by ID along with sender and receiver details
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the transaction to retrieve
      responses:
        "200":
          description: Successfully retrieved transaction details by ID with sender and receiver details
        "404":
          description: Transaction not found
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
